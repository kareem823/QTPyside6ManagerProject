please implement this break down of the UI components as they would be implemented in PySide6/Qt. 

1. Window Structure:
   - Main Window: QMainWindow
   - Central Widget: QWidget (main container)
   - Main Layout: QHBoxLayout (horizontal layout dividing sidebar and content)

2. Left Sidebar:
   - Container: QFrame with dark background
   - Logo Section: QLabel with custom styling
   - Navigation Menu: Series of QPushButton widgets arranged in QVBoxLayout
   - Menu Items: Each item is a QPushButton with custom styling

3. Main Content Area:
   - Header Section:
     - Welcome Text: QLabel
     - Search Bar: QLineEdit with placeholder text
   
   - Student Info Section:
     - Title: QLabel with custom styling
     - Action Buttons: QPushButton for Add Student, Excel Export, PDF Export
     - Filter Controls:
       - Gender Dropdown: QComboBox
       - Class Dropdown: QComboBox
       - Student Search: QLineEdit
   
   - Student Table:
     - Container: QTableWidget
     - Headers: Set using setHorizontalHeaderLabels
     - Columns: Configured using QHeaderView for proper sizing

4. Styling Elements:
   - Dark theme for sidebar: Using stylesheet
   - Custom fonts and padding: Applied through stylesheets
   - Responsive layouts: Using stretch factors in layouts

Here is a detailed explanation of both the Student Table and Left Sidebar components with specific implementation details.

1. Student Table Features:
- Header configuration with QHeaderView provides flexible column sizing:
  - Stretch mode for name column (expands to fill space)
  - Fixed width for ID and Gender columns
  - ResizeToContents for other columns
- Styling includes:
  - Alternating row colors for better readability
  - Custom grid lines and borders
  - Padding and alignment for cell contents
  - Selection highlighting
- Row management includes:
  - Dynamic row addition
  - Custom cell formatting
  - Action buttons in the last column

2. Sidebar Features:
- Frame-based structure with fixed width
- Dark theme implementation
- Logo section with icon and text
- Menu items with:
  - Custom styling for normal, hover, and pressed states
  - Icon support with consistent sizing
  - Left-aligned text with padding
- Expandable submenus:
  - Nested layout structure
  - Indented submenu items
  - Show/hide functionality
- Visual hierarchy through:
  - Color variations for different states
  - Padding and spacing
  - Font size differences between main and submenu items

The code provides a full implementation that you can customize by:
1. Adjusting the color scheme (modify the stylesheet colors)
2. Changing the dimensions (modify padding, margins, and fixed widths)
3. Adding or modifying menu items
4. Customizing the submenu behavior
5. Adjusting the table column configurations

